

void main()
{	
	vec3 normal = gl_NormalMatrix * gl_Normal;

	vec3 vVertex = vec3(gl_ModelViewMatrix * gl_Vertex);

	// towards light in camera space
	vec3 lightVec = vec3(gl_LightSource[0].position.xyz - vVertex);
	// towards the eye in camera space
	vec3 eyeVec = -vVertex;

	//---

	vec3 N = normalize(normal);
	vec3 L = normalize(lightVec);
	
	float lambertTerm = max(dot(N,L), 0.0);
	
 	// ** phong
	// vec3 E = normalize(eyeVec);
	// float prod = dot(reflect(L, N), E);
	// ** blinn
	float prod = dot(gl_LightSource[0].halfVector.xyz, N); 

	float specularTerm = pow( max(prod, 0.0), gl_FrontMaterial.shininess );

	vec4 ambient = gl_LightSource[0].ambient;
	vec4 diffuse = gl_LightSource[0].diffuse * lambertTerm;	
	vec4 specular = gl_LightSource[0].specular * 
	                gl_FrontMaterial.specular * specularTerm;	

	// mimicing GL_COLOR_MATERIAL
	gl_FrontColor = (ambient + diffuse) * gl_Color + specular;


	//---
	//gl_FrontColor = gl_Color;
	gl_Position = ftransform();		
}
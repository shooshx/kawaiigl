-- model
xd=3.36
yd=3.63
zd=6.35

x0=-xd
x1=xd
y0=-yd
y1=yd
z0=-zd
z1=zd
 
a1={x1,y1,z1}
a2={x1,y0,z1}
a3={x0,y0,z1}
a4={x0,y1,z1}
add(a4,a3,a2,a1)

b1={x1,y1,z0}
b2={x1,y0,z0}
b3={x0,y0,z0}
b4={x0,y1,z0}
add(b1,b2,b3,b4)

add(a2,b2,b1,a1)
add(a1,b1,b4,a4)
add(a3,b3,b2,a2)
add(a4,b4,b3,a3)

-- iso
xd=3.36
yd=3.63
zd=6.35
plot[cos(x)*sin(y*z) + cos(y)*sin(x*z) + cos(z)*sin(x*y) - 0.2*(cos(x*x)*cos(y*y)*cos(z*z)) +.0625, 0.03, -xd,xd, -yd,yd, -zd,zd]

--------
axis(3)
plot[cos(x)*sin(y*z) + cos(y)*sin(x*z) + cos(z)*sin(x*y) - 0.2*(cos(x*x)*cos(y*y)*cos(z*z)) +.0625, 0.1, -3.36,3.36, -3.63,3.63, -6.35,6.35]
-------

plot[cos

x=1
y=1
z=1
plot(x*x+y*y+z*z-1, 0.1, -1.2,1.2, -1.2,1.2, -1.2,1.2)
plot(x*x+y*y+z*z-1, 0.151, -1.21,1.21, -1.21,1.21, -1.21,1.21)
plot(x+y+z, 0.1, -1.2,1.2, -1.2,1.2, -1.2,1.2)
plot(x, 0.2, -1,1, -1,1, -1,1)
plot(x-0.5, 0.2, 0,1, 0,1, 0,1)
plot(x-0.1, 0.2, 0,0.22, 0,0.22, 0,0.22)
plot(x+0.23, 0.1, -1.2,1.2, -1.2,1.2, -1.2,1.2)

plot(y+x+z-0.33, 0.1, -1.2,1.2, -1.2,1.2, -1.2,1.2)

plot(y+0+z+0.2, 0.5, -0.0,0.55, -0.0,0.55, -0.5,0.2)


missing tri?
plot(x*x+y*y*+z*z-d, 0.1, -1.2,1.2, -1.2,1.2, -1.2,1.2)
plot(x*x+y*y*y*z-1.21, 0.1, -1.2,1.2, -1.2,1.2, -1.2,1.2)
plot(x*x+y*y*z-1, 0.2, -1.2,1.2, -1.2,1.2, -1.2,1.2)
plot(x*x+y*y*z-1., 0.2, -1.2,-1., -0.2,0.0, -0.2,0.0) 

plot(x*x+y*y*z-1.002, 0.2, -1.2,-0.8, -0.2,0.0, -0.0,0.2)

plot(y*y+x*x*z-1, 0.2, -1.2,1.2, -1.2,1.2, -1.2,1.2)
plot(z*z+y*y*x-1, 0.2, -1.2,1.2, -1.2,1.2, -1.2,1.2)

plot(x*x+y*y+z*z-1, 0.21, -1.2,1.2, -1.2,1.2, -1.2,1.2)
plot(x*x+y*y+z*z-1, 0.601, -1.2,1.2, -1.2,1.2, -1.2,1.2)

F=((-(x*x)*(z*z*z)-(9/80)*(y*y)*(z*z*z))+((x*x)+(9/4)*(y*y)+(z*z)-1)*((x*x)+(9/4)*(y*y)+(z*z)-1)*((x*x)+(9/4)*(y*y)+(z*z)-1))

-- vtx
varying vec3 normal;
varying vec3 lightVec;
varying vec3 eyeVec;
varying vec3 pos;

void main()
{	
	normal = gl_NormalMatrix * gl_Normal;

	vec3 vVertex = vec3(gl_ModelViewMatrix * gl_Vertex);
	pos = gl_Vertex.xyz;

	// towards light in camera space
	lightVec = vec3(gl_LightSource[0].position.xyz - vVertex);
	// towards the eye in camera space
	eyeVec = -vVertex;

	gl_FrontColor = gl_Color;
	gl_Position = ftransform();		
}


-- frag
varying vec3 normal;
varying vec3 lightVec;
varying vec3 eyeVec;
varying vec3 pos;

uniform sampler2D tex;

void main (void)
{					
	vec3 N = normalize(normal);
	vec3 L = normalize(lightVec);
	
	float lambertTerm = max(abs(dot(N,L)), 0.0);
	
 	// ** phong
	// vec3 E = normalize(eyeVec);
	// float prod = dot(reflect(L, N), E);
	// ** blinn
	float prod = dot(gl_LightSource[0].halfVector.xyz, N); 

	float specularTerm = pow( max(prod, 0.0), gl_FrontMaterial.shininess );

	vec4 ambient = gl_LightSource[0].ambient;
	vec4 diffuse = gl_LightSource[0].diffuse * lambertTerm;	
	vec4 specular = gl_LightSource[0].specular * 
	                gl_FrontMaterial.specular * specularTerm;	

	float x = pos.x, y = pos.y, z = pos.z;
	float v = cos(x)*sin(y*z) + cos(y)*sin(x*z) + cos(z)*sin(x*y) - .2*(cos(x*x)*cos(y*y)*cos(z*z)) +.0625;
	vec4 cv = texture2D(tex, vec2(v,0));
	// mimicing GL_COLOR_MATERIAL
	gl_FragColor = (ambient + diffuse) * cv + specular;			
}
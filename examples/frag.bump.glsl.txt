varying vec3 lightVec;
varying vec3 eyeVec, halfVec;
varying vec3 normal;
uniform sampler2D colorMap;
uniform sampler2D normalMap;

void main (void)
{		
	vec3 N = normalize( texture2D(normalMap, gl_TexCoord[0].st).xyz * 2.0 - 1.0);
	vec3 L = normalize(lightVec);
	vec3 H = normalize(halfVec);
	
	float lambertTerm = max(dot(N,L), 0.0);
	
 	// ** phong
	//vec3 E = normalize(eyeVec);
	//float prod = dot(reflect(L, N), E);
	// ** blinn
	float prod = dot(H, N); 

	float specularTerm = pow( max(prod, 0.0), gl_FrontMaterial.shininess );

	vec4 ambient = gl_LightSource[0].ambient;
	vec4 diffuse = gl_LightSource[0].diffuse * lambertTerm;	
	vec4 specular = gl_LightSource[0].specular *  gl_FrontMaterial.specular * specularTerm;	
	
	vec4 base = gl_Color * texture2D(colorMap, gl_TexCoord[0].st);

	gl_FragColor = (ambient + diffuse) * base + specular;			
}
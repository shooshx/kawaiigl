varying float LightIntensity;
varying vec3 MCposition;

uniform vec3 colorA;
uniform vec3 colorB;
uniform sampler2D noisef;

const float offset= 4.72;
const float offset2 = 0.5;


float mod(int x, float y){
    return float(x) - y * floor(float(x) / y);
}

// 128x128 tiles are 8x16
vec4 flat_texture3D(vec3 p)
{
    vec2 inimg = p.xy;
    //inimg.y = max(inimg.y, 0.00390625);
    //inimg.y = min(inimg.y, 0.99609375);

    float fpz =   p.z*128.0;
    int d1 = int(fpz);
    float ix1 = mod(d1, 8.0); 
    float iy1 = float(d1 / 8);
    vec2 oc1 = inimg + vec2(ix1, iy1);
    oc1 *= vec2(0.125, 0.0625); // 1/8,1/16

    int d2 = d1 + 1;
    float ix2 = mod(d2, 8.0); 
    float iy2 = float(d2 / 8);
    vec2 oc2 = inimg + vec2(ix2, iy2);
    oc2 *= vec2(0.125, 0.0625);

    vec4 t1 = texture2D(noisef, oc1);
    vec4 t2 = texture2D(noisef, oc2);

    vec4 t = t1; //mix(t1, t2, fract(fpz));

    return t;
}

void main (void)
{
    // normalize -1:1 to 0:1
    vec3 p = MCposition *0.5 + vec3(0.5,0.5,0.5);

    vec4 noisevec = flat_texture3D(p);
    
    float a = noisevec[0]; 


    vec3 color   = vec3(a,a,a);// mix(colorA, colorB, a);
    //color       *= LightIntensity;

    gl_FragColor = vec4(color, 1.0);
    return;



}